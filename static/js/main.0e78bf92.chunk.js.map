{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","App.tsx","index.tsx"],"names":["PageNavLink","memo","to","text","className","isActive","cn","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","name","PeopleTable","useState","people","setPeople","errorMessage","setErrorMessage","isLoading","setIsLoading","isError","setIsError","getPersonByName","peopleArr","find","getPeopleFromServer","peopleFromServer","peopleWithParents","map","mother","motherName","father","fatherName","useEffect","useParams","isPeopleOnServer","length","born","died","App","role","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.0e78bf92.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: FC<Props> = memo(({ to, text }) => {\n  return (\n    <div className=\"navbar-brand\">\n      <NavLink\n        to={to}\n        className={({ isActive }) => cn('navbar-item',\n          { 'has-background-grey-lighter': isActive })}\n      >\n        {text}\n      </NavLink>\n    </div>\n  );\n});\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`../${person.slug}`}\n      className={cn({ 'has-text-danger': person.sex === 'f' })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { FC, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\nexport const PeopleTable: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const showErrorMessage = (message: string) => {\n    setErrorMessage(message);\n  };\n\n  const getPersonByName = (name: string | null, peopleArr: Person[]) => (\n    peopleArr.find(person => person.name === name)\n  );\n\n  const getPeopleFromServer = async () => {\n    setIsLoading(true);\n    try {\n      const peopleFromServer = await getPeople();\n\n      const peopleWithParents = peopleFromServer.map((person: Person) => {\n        return {\n          ...person,\n          mother: getPersonByName(person.motherName, peopleFromServer),\n          father: getPersonByName(person.fatherName, peopleFromServer),\n        };\n      });\n\n      setPeople(peopleWithParents);\n    } catch {\n      showErrorMessage('Something went wrong');\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getPeopleFromServer();\n  }, []);\n\n  const { slug } = useParams();\n\n  const isPeopleOnServer = people.length !== 0 && !isError;\n\n  return (\n    <div className=\"box table-container\">\n\n      {isLoading && <Loader />}\n\n      {isError && (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          {errorMessage}\n        </p>\n      )}\n\n      {isPeopleOnServer\n        ? (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Born</th>\n                <th>Died</th>\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n\n            <tbody>\n\n              {people.map(person => (\n                <tr\n                  key={person.slug}\n                  data-cy=\"person\"\n                  className={cn(\n                    { 'has-background-warning': person.slug === slug },\n                  )}\n                >\n                  <td>\n                    <PersonLink person={person} />\n                  </td>\n                  <td>{person.sex}</td>\n                  <td>{person.born}</td>\n                  <td>{person.died}</td>\n                  <td>\n                    {person.mother\n                      ? <PersonLink person={person.mother} />\n                      : person.motherName || '-'}\n                  </td>\n                  <td>\n                    {person.father\n                      ? <PersonLink person={person.father} />\n                      : person.fatherName || '-'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )\n        : (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        )}\n\n    </div>\n  );\n};\n","import {\n  Navigate,\n  Outlet,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport './App.scss';\nimport { PageNavLink } from './components/PageNavLink/PageNavLink';\nimport { PeopleTable } from './components/PeopleTable/PeopleTable';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink to=\"/\" text=\"Home\" />\n          <PageNavLink to=\"/people\" text=\"People\" />\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route\n            path=\"people\"\n            element={(\n              <>\n                <h1 className=\"title\">People Page</h1>\n                <Outlet />\n              </>\n            )}\n          >\n            <Route index element={<PeopleTable />} />\n            <Route path=\":slug\" element={<PeopleTable />} />\n          </Route>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}